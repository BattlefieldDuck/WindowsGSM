@inject GameServerService GameServerService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudPaper Elevation="2" Class="mb-4">
    <MudToolBar>
        <MudTooltip Text="Browse SourceMod Directory">
            <MudIconButton Icon="@Icons.Material.Filled.Folder" Color="Color.Warning" />
        </MudTooltip>

        <MudSpacer />
    </MudToolBar>
</MudPaper>

<MudDropContainer T="FileItem" ItemIsDisabled="@( (item) => item.IsLocked == true)"  Items="_items" ItemsSelector="@((item,dropzone) => item.TransferSlot == dropzone)"  ItemDropped="ItemUpdated" Class="d-flex flex-wrap">
    <ChildContent>
        <MudPaper Class="ma-4" Height="400px" Width="300px">
            <MudList Clickable="true" Class="mud-height-full">
                <MudDropZone T="FileItem" Identifier="Company" Class="mud-height-full">
                    <MudListSubheader>Disabled Plugins</MudListSubheader>
                </MudDropZone>
            </MudList>
        </MudPaper>
        <MudPaper Class="ma-4" Height="400px" Width="300px">
            <MudList Clickable="true" Class="mud-height-full">
                <MudDropZone T="FileItem" Identifier="External" Class="mud-height-full">
                    <MudListSubheader>Loaded Plugins</MudListSubheader>
                </MudDropZone>
            </MudList>
        </MudPaper>
    </ChildContent>
    <ItemRenderer>
        <MudListItem Disabled="@(context.IsLocked ? true : false)" Icon="@Icons.Custom.FileFormats.FileDocument">
            @context.Name
        </MudListItem>
    </ItemRenderer>
</MudDropContainer>

<MudOverlay Visible="@(!IsInstalled)" DarkBackground="true" Absolute="true">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@((e) => OpenCreateDialog())">Install SourceMod + MetaMod</MudButton>
</MudOverlay>

@code {
    [Parameter]
    public IGameServer GameServer { get; set; } = null!;

    private IMod _mod = new SourceMod();
    private bool IsInstalled = false;


    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
    }

    protected override void OnInitialized()
    {
        IsInstalled = _mod.Exists(GameServer);
    }

    private async void OpenCreateDialog()
    {
        DialogParameters parameters = new();
        parameters.Add("Mod", _mod);

        DialogOptions options = new()
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true,
            CloseOnEscapeKey = true,
            DisableBackdropClick = true,
        };

        IDialogReference dialogReference = DialogService.Show<SourceModCreateDialog>("Install SourceMod", parameters, options);
        DialogResult dialogResult = await dialogReference.Result;

        if (dialogResult.Cancelled)
        {
            return;
        }

        string version = (string)dialogResult.Data;

        try
        {
            await GameServerService.InstallMod(GameServer, _mod, version);
            Snackbar.Add($"{GameServer.Config.Basic.Name}: SourceMod Installed", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add($"{GameServer.Config.Basic.Name}: Fail to install SourceMod - {e.Message}", Severity.Error);
        }
    }

    private void ItemUpdated(MudItemDropInfo<FileItem> dropItem)
    {
		dropItem.Item.TransferSlot = dropItem.DropzoneIdentifier;
	}

	private List<FileItem> _items = new()
		{
			new FileItem() { Name = "File1.txt", IsLocked = false, TransferSlot = "Company" },
			new FileItem() { Name = "File2.txt", IsLocked = false, TransferSlot = "External" },
			new FileItem() { Name = "File3.txt", IsLocked = true, TransferSlot = "Company" },
		    new FileItem() { Name = "File4.txt", IsLocked = true, TransferSlot = "Company" },
		    new FileItem() { Name = "File5.txt", IsLocked = false, TransferSlot = "External" },
		    new FileItem() { Name = "File6.txt", IsLocked = true, TransferSlot = "Company" },
		};

	public class FileItem
	{
		public string Name { get; init; }
		public bool IsLocked { get; set; }
		public string TransferSlot { get; set; }
	}
}
