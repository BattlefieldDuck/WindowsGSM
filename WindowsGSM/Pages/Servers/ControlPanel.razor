@page "/servers/{GuidString}"
@inject NavigationManager NavigationManager
@inject GameServerService GameServerService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@implements IDisposable

<MudContainer Class="mt-6 mb-6" MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h3">Control Panel <MudChip Variant="Variant.Text">@(_gameServer?.Status.ToStringEx() ?? "Unknown")</MudChip></MudText>

    @if (_gameServer != null)
    {
        List<IGameServer> gameServers = new() { _gameServer };

        <MudTable Items="@gameServers" Dense="true" MultiSelection="false" Class="mt-4 mb-4">
            <HeaderContent>
                <MudTh>Game</MudTh>
                <MudTh>PID</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Map</MudTh>
                <MudTh>Players</MudTh>
                <MudTh>Uptime</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Game">
                    <MudTooltip Text="@context.Name" Placement="Placement.Right">
                        <MudImage Src="@context.ImageSource" Alt="@context.Config.ClassName" Elevation="2" Class="rounded-lg" Width="24" />
                    </MudTooltip>
                </MudTd>
                <MudTd DataLabel="PID">@context.Process.Id</MudTd>
                <MudTd DataLabel="Status"><MudChip Variant="Variant.Text" Size="Size.Small">@context.Status.ToStringEx()</MudChip></MudTd>
                <MudTd DataLabel="Name">@context.Config.Basic.Name</MudTd>
                <MudTd DataLabel="Map">@GameServerService.GetResponse(context)?.MapName</MudTd>
                <MudTd DataLabel="Players">
                    @if (context.Config is IProtocolConfig protocolConfig)
                    {
                        var response = GameServerService.GetResponse(context);

                        if (response != null)
                        {
                            <span>@response.Player / @response.MaxPlayer</span>
                        }
                    }
                </MudTd>
                <MudTd DataLabel="Uptime">@UptimeString(context.Process.StartTime)</MudTd>
             </RowTemplate>
        </MudTable>

        <MudPaper Elevation="2" Class="mb-4">
            <MudToolBar>
                <MudTooltip Text="@(Operation.Start.ToString())">
                    <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" Color="Color.Success" OnClick="@((e) => Start(_gameServer))" Disabled="@(_gameServer.Status.IsDisabled(Operation.Start))" />
                </MudTooltip>
                <MudTooltip Text="@(Operation.Stop.ToString())">
                    <MudIconButton Icon="@Icons.Material.Filled.Stop" Color="Color.Warning" OnClick="@((e) => Stop(_gameServer))" Disabled="@(_gameServer.Status.IsDisabled(Operation.Stop))" />
                </MudTooltip>
                <MudTooltip Text="@(Operation.Restart.ToString())">
                    <MudIconButton Icon="@Icons.Material.Filled.RestartAlt" Color="Color.Info" OnClick="@((e) => Restart(_gameServer))" Disabled="@(_gameServer.Status.IsDisabled(Operation.Restart))" />
                </MudTooltip>
                <MudTooltip Text="@(Operation.Kill.ToString())">
                    <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Error" OnClick="@((e) => Kill(_gameServer))" Disabled="@(_gameServer.Status.IsDisabled(Operation.Kill))" />
                </MudTooltip>
                <MudTooltip Text="Toggle Console">
                    <MudIconButton
                        Icon="@Icons.Material.Filled.Terminal"
                        Color="Color.Inherit"
                        OnClick="@((e) => _gameServer.Process.ToggleWindow())"
                        Disabled="@(_gameServer.Status != Status.Started || _gameServer.Process.Mode != ProcessEx.ConsoleType.Windowed)" />
                </MudTooltip>

                <MudDivider Vertical="true" FlexItem="true" Class="ma-4" />

                <MudTooltip Text="Browse Server Files">
                    <MudIconButton Icon="@Icons.Filled.Folder" Color="Color.Warning" OnClick="@((e) => OpenFileExplorer(_gameServer))" />
                </MudTooltip>
                @*<MudTooltip Text="Browse Backup Files">
                    <MudIconButton Icon="@Icons.Filled.Folder" Color="Color.Info" OnClick="@((e) => BrowseBackupDirectory(_gameServer))" />
                </MudTooltip>

                <MudDivider Vertical="true" FlexItem="true" Class="ma-4" />

                <MudTooltip Text="Backup">
                    <MudIconButton Icon="@Icons.Filled.Backup" Color="Color.Tertiary" OnClick="@((e) => Backup(_gameServer))" />
                </MudTooltip>
                <MudTooltip Text="Restore">
                    <MudIconButton Icon="@Icons.Filled.Restore" Color="Color.Warning" OnClick="@((e) => Restore(_gameServer))" />
                </MudTooltip>*@

                <MudDivider Vertical="true" FlexItem="true" Class="ma-4" />

                <MudTooltip Text="Configuation">
                    <MudIconButton Icon="@Icons.Filled.Settings" Color="Color.Inherit" OnClick="@((e) => NavigateToConfiguration(_gameServer.Config.Guid))" />
                </MudTooltip>

                <MudSpacer />

                <MudTooltip Text="@(Operation.Delete.ToString())">
                    <MudIconButton Icon="@Icons.Filled.DeleteForever" Color="Color.Error" OnClick="@((e) => Delete(_gameServer))" Disabled="@(_gameServer.Status.IsDisabled(Operation.Delete))" />
                </MudTooltip>
            </MudToolBar>
        </MudPaper>

        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true">
            <MudTabPanel Text="Console" Icon="@Icons.Material.Filled.Terminal">
                @* Search Bar for Xterm*@
                @*<div class="pa-1" style="background-color:black;">
                    <MudTextField 
                        Style="color:white;"
                        Margin="Margin.Dense"
                        IconSize="Size.Small"
                        @bind-Value="_search"
                        Placeholder="Search"
                        Variant="Variant.Outlined"
                        Adornment="Adornment.End"
                        AdornmentIcon="@Icons.Filled.Search"
                        AdornmentColor="Color.Info"
                        OnAdornmentClick="@Search" />
                </div>*@

                <div style="background-color:black;">
                    <Xterm @ref="_terminal" Options="_options" AddonIds="_addonIds" OnFirstRender="@OnFirstRender" OnKey="@OnKey" />
                </div>

                @if (_gameServer.Process.Mode == ProcessEx.ConsoleType.Redirect)
                {
                    <div class="pa-1" style="background-color:black;border-bottom-left-radius:var(--mud-default-borderradius);border-bottom-right-radius:var(--mud-default-borderradius);">
                        <MudTextField
                            T="string"
                            @ref="_commandTextField"
                            Immediate="true"
                            Variant="Variant.Outlined"
                            Style="color:white;"
                            Margin="Margin.Dense"
                            Placeholder="@(_gameServer.Status == Status.Started ? "Command" : string.Empty)"
                            IconSize="Size.Small"
                            Adornment="Adornment.End"
                            AdornmentIcon="@Icons.Filled.Send"
                            AdornmentColor="Color.Info"
                            OnAdornmentClick="@((e) => SendCommand())"
                            OnKeyDown="OnKeyDown"
                            Disabled="@(_gameServer.Status != Status.Started)" />
                    </div>
                }
            </MudTabPanel>
            <MudTabPanel Text="Version" Icon="@Icons.Filled.Update">
                <div class="ma-6">
                    @{
                        <MudText Typo="Typo.h5" Class="mt-6">@_gameServer.Name <MudChip Variant="Variant.Outlined" Size="Size.Small">SERVER</MudChip></MudText>

                        <div class="mt-2 mb-3">
                            @if (string.IsNullOrEmpty(_gameServer.Config.LocalVersion))
                            {
                                <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Success" StartIcon="@Icons.Filled.FileDownload" OnClick="@((e) => Install(_gameServer))" Disabled="@_gameServer.Status.IsDisabled(Operation.Install)">Install</MudButton>
                            }
                            else
                            {
                                <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Warning" StartIcon="@Icons.Filled.KeyboardDoubleArrowUp" OnClick="@((e) => Update(_gameServer))" Disabled="@_gameServer.Status.IsDisabled(Operation.Update)">Update</MudButton>
                            }
                        </div>

                        <MudTextField T="string" Label="Local Version" ReadOnly="true" Value="@_gameServer.Config.LocalVersion" Placeholder="Not Installed" />

                        GameServerService.IVersions? versionData = GameServerService.GetVersions(_gameServer);

                        <MudTextField
                            T="string"
                            Label="Latest Stable Version"
                            ReadOnly="true"
                            Value="@((versionData == null || versionData.Versions.Count > 0) ? string.Empty : versionData.Versions[0])"
                            HelperText="@($"Last fetch: {(versionData?.DateTime.ToString() ?? "-")}")" />
                    }

                    @foreach (IMod mod in GameServerService.Mods)
                    {
                        @if (_gameServer.Config.GetType().GetInterfaces().Contains(mod.ConfigType))
                        {
                            <MudText Typo="Typo.h5" Class="mt-6">@mod.Name <MudChip Variant="Variant.Outlined" Size="Size.Small">MOD</MudChip></MudText>
                            <MudText Typo="Typo.body2">@mod.Description</MudText>

                            <div class="mt-2 mb-3">
                                @if (string.IsNullOrEmpty(mod.GetLocalVersion(_gameServer)))
                                {
                                    <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Success" StartIcon="@Icons.Filled.FileDownload" OnClick="@((e) => InstallMod(_gameServer, mod))" Disabled="@_gameServer.Status.IsDisabled(Operation.InstallMod)">Install</MudButton>
                                }
                                else
                                {
                                    <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Warning" StartIcon="@Icons.Filled.KeyboardDoubleArrowUp" OnClick="@((e) => UpdateMod(_gameServer, mod))" Disabled="@_gameServer.Status.IsDisabled(Operation.UpdateMod)">Update</MudButton>
                                    <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Error" StartIcon="@Icons.Filled.Delete" OnClick="@((e) => DeleteMod(_gameServer, mod))" Disabled="@_gameServer.Status.IsDisabled(Operation.DeleteMod)">Delete</MudButton>     
                                }
                            </div>

                            <MudTextField T="string" Label="Local Version" ReadOnly="true" Value="@(mod.GetLocalVersion(_gameServer))" Placeholder="Not Installed" />

                            GameServerService.IVersions? versionData2 = GameServerService.GetVersions(mod);

                            <MudTextField
                                T="string"
                                Label="Latest Stable Version"
                                ReadOnly="true"
                                Value="@((versionData2 == null || versionData2.Versions.Count > 0) ? string.Empty : versionData2.Versions[0])"
                                HelperText="@($"Last fetch: {(versionData2?.DateTime.ToString() ?? "-")}")" />
                        }
                    }
                </div>
            </MudTabPanel>
        </MudTabs>
    }
</MudContainer>

@code {
    [Parameter]
    public string GuidString { get; set; } = string.Empty;

    private IGameServer? _gameServer;
    private Xterm? _terminal;
    private TerminalOptions _options = new()
    {
        CursorBlink = true,
        CursorStyle = CursorStyle.Bar,
        WindowsMode = true,
    };
    private string[] _addonIds =
    {
        "xterm-addon-fit",
        "xterm-addon-search",
        "xterm-addon-web-links",
    };
    private string _search = string.Empty;
    private MudTextField<string>? _commandTextField;
    private Timer? timer;

    protected override void OnInitialized()
    {
        GameServerService.GameServersHasChanged += () => InvokeAsync(StateHasChanged);
        timer = new Timer((state) => InvokeAsync(StateHasChanged), null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));

        Subscribe();
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

    protected override Task OnParametersSetAsync()
    {
        Unsubscribe();
        Subscribe();

        return OnFirstRender();
    }

    private void Subscribe()
    {
        if (Guid.TryParse(GuidString, out Guid guid))
        {
            _gameServer = GameServerService.Instances.Where(x => x.Config.Guid == guid).FirstOrDefault();
        }

        if (_gameServer != null)
        {
            _gameServer.Process.OutputDataReceived += OutputDataReceived;
            _gameServer.Process.Cleared += Cleared;
        }
    }

    private void Unsubscribe()
    {
        if (_gameServer != null)
        {
            _gameServer.Process.OutputDataReceived -= OutputDataReceived;
            _gameServer.Process.Cleared -= Cleared;
        }
    }

    private async Task OnFirstRender()
    {
        if (_terminal != null && _gameServer != null)
        {
            try
            {
                await _terminal.InvokeAddonFunctionVoidAsync("xterm-addon-fit", "fit");
                await _terminal.Clear();
                await _terminal.Write(_gameServer.Process.Output);
            }
            catch
            {
                _terminal = null;
            }
        }
    }

    private string UptimeString(DateTime? startTime)
    {
        if (startTime == null)
        {
            return "0:00:00:00";
        }

        TimeSpan t = TimeSpan.FromSeconds((DateTime.Now - startTime.Value).TotalSeconds);

        return string.Format("{0}:{1:D2}:{2:D2}:{3:D2}", (int)t.TotalDays, t.Hours, t.Minutes, t.Seconds);
    }

    private async Task Search(MouseEventArgs args)
    {
        if (_terminal != null)
        {
            await _terminal.InvokeAddonFunctionAsync<bool>("xterm-addon-search", "findNext", _search);
        }
    }

    private void OutputDataReceived(string data)
    {
        InvokeAsync(() => _terminal?.Write(data));
    }

    private void Cleared()
    {
        _terminal?.Clear();
    }

    private void OnKey(KeyboardEventArgs args)
    {
        if (_gameServer != null && _gameServer.Process.Mode == ProcessEx.ConsoleType.PseudoConsole)
        {
            try
            {
                _gameServer.Process.Write(args.Key);
            }
            catch
            {
                // Cannot write
            }
        }
    }

    private async Task OnKeyDown(KeyboardEventArgs args)
    {
        if (_commandTextField != null && (args.Code == "Enter" || args.Code == "NumpadEnter"))
        {
            await SendCommand();
            await Task.Delay(9);
            await _commandTextField.Clear();
        }
    }

    private async Task SendCommand()
    {
        if (_gameServer != null && _commandTextField != null)
        {
            try
            {
                _gameServer.Process.WriteLine(_commandTextField.Value ?? string.Empty);
            }
            catch
            {
                // Cannot write
            }

            await _commandTextField.Clear();
        }
    }

    private async Task Start(IGameServer gameServer)
    {
        try
        {
            await GameServerService.Start(gameServer);
            Snackbar.Add($"{gameServer.Config.Basic.Name}: Started", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add($"{gameServer.Config.Basic.Name}: Fail to Start - {e.Message}", Severity.Error);
        }
    }

    private async Task Stop(IGameServer gameServer)
    {
        try
        {
            await GameServerService.Stop(gameServer);
            Snackbar.Add($"{gameServer.Config.Basic.Name}: Stopped", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add($"{gameServer.Config.Basic.Name}: Fail to Stop - {e.Message}", Severity.Error);
        }
    }

    private async Task Restart(IGameServer gameServer)
    {
        try
        {
            await GameServerService.Restart(gameServer);
            Snackbar.Add($"{gameServer.Config.Basic.Name}: Restarted", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add($"{gameServer.Config.Basic.Name}: Fail to Restart - {e.Message}", Severity.Error);
        }
    }

    private async Task Kill(IGameServer gameServer)
    {
        try
        {
            await GameServerService.Kill(gameServer);
            Snackbar.Add($"{gameServer.Config.Basic.Name}: Killed", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add($"{gameServer.Config.Basic.Name}: Fail to Kill - {e.Message}", Severity.Error);
        }
    }

    private async void Install(IGameServer gameServer)
    {
        DialogParameters parameters = new();
        parameters.Add("GameServer", gameServer);

        DialogOptions options = new()
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true,
            CloseOnEscapeKey = true,
            DisableBackdropClick = true,
        };

        IDialogReference dialogReference = DialogService.Show<GameServerInstallDialog>($"Install {gameServer.Name}", parameters, options);
        DialogResult dialogResult = await dialogReference.Result;

        if (dialogResult.Cancelled)
        {
            return;
        }

        Dictionary<string, object> data = (Dictionary<string, object>)dialogResult.Data;
        string version = data["Version"].ToString()!;

        try
        {
            await GameServerService.Install(gameServer, version);
            Snackbar.Add($"{gameServer.Config.Basic.Name}: Installed", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add($"{gameServer.Config.Basic.Name}: Fail to Install - {e.Message}", Severity.Error);
        }
    }

    private async Task Update(IGameServer gameServer)
    {
        DialogParameters parameters = new();
        parameters.Add("GameServer", gameServer);

        DialogOptions options = new()
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true,
            CloseOnEscapeKey = true,
        };

        IDialogReference dialogReference = DialogService.Show<GameServerUpdateDialog>($"Update {gameServer.Name}", parameters, options);
        DialogResult dialogResult = await dialogReference.Result;

        if (dialogResult.Cancelled)
        {
            return;
        }

        try
        {
            string version = dialogResult.Data.ToString()!;
            await GameServerService.Update(gameServer, version);
            Snackbar.Add($"{gameServer.Config.Basic.Name}: Updated", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add($"{gameServer.Config.Basic.Name}: Fail to Update - {e.Message}", Severity.Error);
        }
    }

    private async Task Delete(IGameServer gameServer)
    {
        DialogParameters parameters = new();
        parameters.Add("GameServer", gameServer);

        DialogOptions options = new()
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true,
            CloseOnEscapeKey = true,
        };

        IDialogReference dialogReference = DialogService.Show<GameServerDeleteDialog>("", parameters, options);
        DialogResult dialogResult = await dialogReference.Result;

        if (dialogResult.Cancelled)
        {
            return;
        }

        string guid = gameServer.Config.Guid.ToString();
        string name = gameServer.Config.Basic.Name;

        try
        {
            await GameServerService.Delete(gameServer);
            Snackbar.Add($"{name}: Deleted", Severity.Success);

            if (NavigationManager.ToBaseRelativePath(NavigationManager.Uri).StartsWith($"servers/{guid}"))
            {
                NavigationManager.NavigateTo($"/servers");
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"{name}: Fail to Delete - {e.Message}", Severity.Error);
        }
    }

    private async Task Backup(IGameServer gameServer)
    {
        DialogParameters parameters = new();
        parameters.Add("GameServer", gameServer);

        DialogOptions options = new()
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true,
            CloseOnEscapeKey = true,
        };

        IDialogReference dialogReference = DialogService.Show<GameServerBackupDialog>("", parameters, options);
        DialogResult dialogResult = await dialogReference.Result;

        if (dialogResult.Cancelled)
        {
            return;
        }

        try
        {
            await GameServerService.Backup(gameServer);
            Snackbar.Add($"{gameServer.Config.Basic.Name}: Backuped", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add($"{gameServer.Config.Basic.Name}: Fail to Backup - {e.Message}", Severity.Error);
        }
    }

    private async Task Restore(IGameServer gameServer)
    {
        DialogParameters parameters = new();
        parameters.Add("GameServer", gameServer);

        DialogOptions options = new()
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true,
            CloseOnEscapeKey = true,
        };

        IDialogReference dialogReference = DialogService.Show<GameServerRestoreDialog>("", parameters, options);
        DialogResult dialogResult = await dialogReference.Result;

        if (dialogResult.Cancelled)
        {
            return;
        }

        try
        {
            // TODO: restore file
            await GameServerService.Restore(gameServer, string.Empty);
            Snackbar.Add($"{gameServer.Config.Basic.Name}: Restored", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add($"{gameServer.Config.Basic.Name}: Fail to Restore - {e.Message}", Severity.Error);
        }
    }

    private async Task InstallMod(IGameServer gameServer, IMod mod)
    {
        DialogParameters parameters = new();
        parameters.Add("Mod", mod);

        DialogOptions options = new()
        {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            CloseButton = true,
            CloseOnEscapeKey = true,
        };

        IDialogReference dialogReference = DialogService.Show<ModDialog>($"Install {mod.Name}", parameters, options);
        DialogResult dialogResult = await dialogReference.Result;

        if (dialogResult.Cancelled)
        {
            return;
        }

        try
        {
            string version = dialogResult.Data.ToString()!;
            await GameServerService.InstallMod(gameServer, mod, version);
            Snackbar.Add($"{gameServer.Config.Basic.Name}: {mod.Name} Installed", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add($"{gameServer.Config.Basic.Name}: Fail to Install {mod.Name} - {e.Message}", Severity.Error);
        }
    }

    private async Task UpdateMod(IGameServer gameServer, IMod mod)
    {
        DialogParameters parameters = new();
        parameters.Add("Mod", mod);

        DialogOptions options = new()
        {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            CloseButton = true,
            CloseOnEscapeKey = true,
        };

        IDialogReference dialogReference = DialogService.Show<ModDialog>($"Update {mod.Name}", parameters, options);
        DialogResult dialogResult = await dialogReference.Result;

        if (dialogResult.Cancelled)
        {
            return;
        }

        try
        {
            string version = dialogResult.Data.ToString()!;
            await GameServerService.UpdateMod(gameServer, mod, version);
            Snackbar.Add($"{gameServer.Config.Basic.Name}: {mod.Name} Updated", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add($"{gameServer.Config.Basic.Name}: Fail to Update {mod.Name} - {e.Message}", Severity.Error);
        }
    }

    private async Task DeleteMod(IGameServer gameServer, IMod mod)
    {
        DialogParameters parameters = new();
        parameters.Add("Mod", mod);

        DialogOptions options = new()
        {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            CloseButton = true,
            CloseOnEscapeKey = true,
        };

        IDialogReference dialogReference = DialogService.Show<ModDialog>($"Delete {mod.Name}", parameters, options);
        DialogResult dialogResult = await dialogReference.Result;

        if (dialogResult.Cancelled)
        {
            return;
        }

        try
        {
            string version = dialogResult.Data.ToString()!;
            await GameServerService.DeleteMod(gameServer, mod);
            Snackbar.Add($"{gameServer.Config.Basic.Name}: {mod.Name} Deleted", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add($"{gameServer.Config.Basic.Name}: Fail to Delete {mod.Name} - {e.Message}", Severity.Error);
        }
    }

    private void OpenFileExplorer(IGameServer gameServer)
    {
        if (!Directory.Exists(gameServer.Config.Basic.Directory))
        {
            Snackbar.Add($"{gameServer.Config.Basic.Name}: Directory does not exist ({gameServer.Config.Basic.Directory})", Severity.Error);
            return;
        }

        try
        {
            Process.Start("explorer.exe", gameServer.Config.Basic.Directory);
        }
        catch (Exception e)
        {
            Snackbar.Add($"{gameServer.Config.Basic.Name}: Fail to open File Explorer - {e.Message}", Severity.Error);
        }
    }

    private void BrowseBackupDirectory(IGameServer gameServer)
    {
        string backupDirectory = BackupRestore.GetBackupPath(gameServer);

        if (!Directory.Exists(backupDirectory))
        {
            Snackbar.Add($"{gameServer.Config.Basic.Name}: Directory does not exist ({backupDirectory})", Severity.Error);
            return;
        }

        try
        {
            Process.Start("explorer.exe", backupDirectory);
        }
        catch (Exception e)
        {
            Snackbar.Add($"{gameServer.Config.Basic.Name}: Fail to open File Explorer - {e.Message}", Severity.Error);
        }
    }

    private void NavigateToConfiguration(Guid guid)
    {
        NavigationManager.NavigateTo($"/servers/{guid}/configuration");
    }
}
