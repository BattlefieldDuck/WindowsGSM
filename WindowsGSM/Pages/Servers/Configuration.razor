@page "/servers/{GuidString}/configuration"
@inject NavigationManager NavigationManager
@inject GameServerService GameServerService
@inject ISnackbar Snackbar

<MudContainer Class="mt-6" MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h3" Class="mb-4">Configuration</MudText>
    
    @if (_gameServer == null)
    {
        <MudChip Variant="Variant.Text">Unknown game server guid</MudChip>
    }
    else
    {
        <MudTabs Elevation="2" Class="mb-4" ActivePanelIndex="@GameServerService.GameServers.FindIndex(x => x.Config.Guid == _gameServer.Config.Guid)">
            @foreach (IGameServer gameServer in GameServerService.GameServers)
            {
                <MudTabPanel Text="@gameServer.Config.Basic.Name" OnClick="@(() => NavigateToConfiguration(gameServer.Config.Guid))" ID="@gameServer.Config.Guid" />
            }
        </MudTabs>

        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Class="mt-6">
            <MudForm @ref="_form">
                @foreach (PropertyInfo tab in _gameServer.Config.GetType().GetProperties())
                {
                    @if (tab.TryGetCustomAttribute<TabPanelAttribute>(out TabPanelAttribute? tabPanel))
                    {
                        <MudTabPanel Text="@tabPanel.Text">
                            <MudFieldBuilder infos="tab.PropertyType.GetProperties()" config="tab.GetValue(_gameServer.Config)" />
                        </MudTabPanel> 
                    }
                }
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary" FullWidth="true" Class="mt-6" OnClick="Update">Save</MudButton>
            </MudForm>
        </MudTabs>
    }
</MudContainer>

@code {
    [Parameter]
    public string GuidString { get; set; } = string.Empty;

    private IGameServer? _gameServer;
    private MudForm? _form;

    protected override void OnInitialized()
    {
        if (Guid.TryParse(GuidString, out Guid guid))
        {
            _gameServer = GameServerService.GameServers.Where(x => x.Config.Guid == guid).FirstOrDefault();
        }
    }

    protected override void OnParametersSet()
    {
        if (Guid.TryParse(GuidString, out Guid guid))
        {
            _gameServer = GameServerService.GameServers.Where(x => x.Config.Guid == guid).FirstOrDefault();
        }
    }

    private async Task Update()
    {
        if (_gameServer != null && _form != null)
        {
            await _form.Validate();

            if (_form.IsValid)
            {
                try
                {
                    await _gameServer.Config.Update();
                    Snackbar.Add("Server Configuration: Saved", Severity.Success);
                }
                catch (Exception e)
                {
                    Snackbar.Add($"Server Configuration: {e.Message}", Severity.Error);
                }
            }
            else
            {
                foreach (string error in _form.Errors)
                {
                    Snackbar.Add($"Server Configuration: {error}", Severity.Error);
                }
            }
        }
    }

    private void NavigateToConfiguration(Guid guid)
    {
        NavigationManager.NavigateTo($"/servers/{guid}/configuration");
    }
}
