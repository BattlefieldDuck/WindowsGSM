@page "/servers/{GuidString}/configuration"
@inject NavigationManager NavigationManager
@inject GameServerService GameServerService
@inject ISnackbar Snackbar

<MudContainer Class="mt-6" MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h3" Class="mb-4">Configuration</MudText>
    
    @if (_gameServer == null)
    {
        <MudChip Variant="Variant.Text">Unknown game server guid</MudChip>
    }
    else
    {
        <MudTabs Elevation="2" Class="mb-4">
            @foreach (IGameServer gameServer in GameServerService.GameServers)
            {
                 <MudTabPanel Text="@gameServer.Config.Basic.Name" OnClick="@(() => NavigateToConfiguration(gameServer.Config.Guid))" />
            }
        </MudTabs>

        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Class="mt-6">
            <MudForm @ref="_form">
                @foreach (PropertyInfo tab in _gameServer.Config.GetType().GetProperties())
                {
                    @if (tab.TryGetCustomAttribute<TabPanelAttribute>(out TabPanelAttribute? tabPanel))
                    {
                        object? config = tab.GetValue(_gameServer.Config);

                        <MudTabPanel Text="@tabPanel.Text">
                            @foreach (PropertyInfo field in tab.PropertyType.GetProperties())
                            {
                                @if (field.TryGetCustomAttribute<TextFieldAttribute>(out TextFieldAttribute? textField))
                                {
                                    @if (textField.InputType == InputType.Password)
                                    {
                                        <MudPasswordField
                                            HelperText="@textField.HelperText"
                                            Label="@textField.Label"
                                            Required="@textField.Required"
                                            RequiredError="@textField.RequiredError"
                                            Value="@(field.GetValue(config)?.ToString() ?? string.Empty)"
                                            ValueChanged="@((e) => field.SetValue(config, e))" />
                                    }
                                    else if (textField.FolderBrowser)
                                    {
                                        <MudFolderBrowserField
                                            HelperText="@textField.HelperText"
                                            Label="@textField.Label"
                                            Required="@textField.Required"
                                            RequiredError="@textField.RequiredError"
                                            Value="@(field.GetValue(config)?.ToString() ?? string.Empty)"
                                            ValueChanged="@((e) => field.SetValue(config, e))" />
                                    }
                                    else
                                    {
                                        <MudTextField 
                                            T="string"
                                            HelperText="@textField.HelperText"
                                            Label="@textField.Label"
                                            Required="@textField.Required"
                                            RequiredError="@textField.RequiredError"
                                            Value="@(field.GetValue(config)?.ToString() ?? string.Empty)"
                                            ValueChanged="@((e) => field.SetValue(config, e))"
                                            InputType="@textField.InputType" />
                                    }
                                }
                                // If C# supports Generic attributes, it can be simpler
                                else if (field.TryGetCustomAttribute<NumericFieldAttribute>(out NumericFieldAttribute? numericField))
                                {
                                    @if (field.PropertyType == typeof(int))
                                    {
                                        <MudNumericField
                                            T="int"
                                            Label="@numericField.Label"
                                            Required="@numericField.Required"
                                            Variant="Variant.Text"
                                            Min="@((int)numericField.Min)"
                                            Max="@((int)numericField.Max)"
                                            Step="@((int)numericField.Step)"
                                            Value="@(int.TryParse(field.GetValue(config)?.ToString(), out int value) ? value : (int)numericField.Min)"
                                            ValueChanged="@((e) => field.SetValue(config, e))" />
                                    }
                                    else if (field.PropertyType == typeof(double))
                                    {
                                        <MudNumericField
                                            T="double"
                                            Label="@numericField.Label"
                                            Required="@numericField.Required"
                                            Variant="Variant.Text"
                                            Min="@numericField.Min"
                                            Max="@numericField.Max"
                                            Step="@numericField.Step"
                                            Value="@(double.TryParse(field.GetValue(config)?.ToString(), out double value) ? value : numericField.Min)"
                                            ValueChanged="@((e) => field.SetValue(config, e))" />
                                    }
                                    else if (field.PropertyType == typeof(decimal))
                                    {
                                        <MudNumericField
                                            T="decimal"
                                            Label="@numericField.Label"
                                            Required="@numericField.Required"
                                            Variant="Variant.Text"
                                            Min="@((decimal)numericField.Min)"
                                            Max="@((decimal)numericField.Max)"
                                            Step="@((decimal)numericField.Step)"
                                            Value="@(decimal.TryParse(field.GetValue(config)?.ToString(), out decimal value) ? value : (decimal)numericField.Min)"
                                            ValueChanged="@((e) => field.SetValue(config, e))" />
                                    }
                                }
                                else if (field.TryGetCustomAttribute<CheckBoxAttribute>(out CheckBoxAttribute? checkBox))
                                {
                                    bool isChecked = bool.TryParse(field.GetValue(config)?.ToString(), out bool value) ? value : false;

                                    <MudCheckBox
                                        T="bool"
                                        Checked="@isChecked"
                                        CheckedChanged="@((e) => field.SetValue(config, e))"
                                        Required="@checkBox.Required"
                                        RequiredError="@checkBox.RequiredError"
                                        Error="@(!isChecked)"
                                        ErrorText="@checkBox.RequiredError"
                                        Color="Color.Primary" >

                                        @if (!string.IsNullOrWhiteSpace(checkBox.Text))
                                        {
                                            Regex regex = new(@"(?:__|[*#])|\[(.*?)\]\((.*?)\)");
                                            MatchCollection matches = regex.Matches(checkBox.Text);
                                            int i = 0;

                                            @foreach (Match match in matches)
                                            {
                                                @while (i < match.Index)
                                                {
                                                    @checkBox.Text[i++];
                                                }

                                                i = match.Index + match.Length;

                                                <MudLink Href="@match.Groups[2].Value" Target="_blank">@match.Groups[1].Value</MudLink>
                                            }
                                        }

                                    </MudCheckBox>

                                    @if (!isChecked)
                                    {
                                        <MudText Typo="Typo.body2" Color="@Color.Error">@checkBox.RequiredError</MudText>
                                    }
                                }
                                else if (field.TryGetCustomAttribute<RadioGroupAttribute>(out RadioGroupAttribute? radioGroup))
                                {
                                    <MudField Label="@radioGroup.Text" Variant="Variant.Text" InnerPadding="false">
                                        <MudRadioGroup T="string" SelectedOption="@field.GetValue(config)?.ToString()" SelectedOptionChanged="@((e) => field.SetValue(config, e))">
                                            @if (field.TryGetCustomAttributes<RadioAttribute>(out List<RadioAttribute> radios))
                                            {
                                                @foreach (RadioAttribute radio in radios)
                                                {
                                                    <MudRadio Option="@radio.Option" Color="Color.Primary" Class="mr-2">@radio.Option</MudRadio>
                                                }
                                            }
                                        </MudRadioGroup>
                                    </MudField>

                                    @* Old
                                    <MudRadioGroup T="string" SelectedOption="@field.GetValue(config)?.ToString()" SelectedOptionChanged="@((e) => field.SetValue(config, e))" Class="mt-1">
                                        <MudText Typo="Typo.caption" Class="mr-2">@radioGroup.Text</MudText>
                                        @if (field.TryGetCustomAttributes<RadioAttribute>(out List<RadioAttribute> radios))
                                        {
                                            @foreach (RadioAttribute radio in radios)
                                            {
                                                <MudRadio Option="@radio.Option" Color="Color.Primary" Class="mr-2">@radio.Option</MudRadio>
                                            }
                                        }
                                    </MudRadioGroup>
                                    *@
                                }
                            }
                        </MudTabPanel> 
                    }
                }

                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary" FullWidth="true" Class="mt-6" OnClick="Update">Save</MudButton>
            </MudForm>
        </MudTabs>
    }
</MudContainer>

@code {
    [Parameter]
    public string GuidString { get; set; } = string.Empty;

    private IGameServer? _gameServer;
    private MudForm? _form;

    protected override void OnInitialized()
    {
        if (Guid.TryParse(GuidString, out Guid guid))
        {
            _gameServer = GameServerService.GameServers.Where(x => x.Config.Guid == guid).FirstOrDefault();
        }
    }

    protected override void OnParametersSet()
    {
        if (Guid.TryParse(GuidString, out Guid guid))
        {
            _gameServer = GameServerService.GameServers.Where(x => x.Config.Guid == guid).FirstOrDefault();
        }
    }

    private async Task Update()
    {
        if (_gameServer != null && _form != null)
        {
            await _form.Validate();

            if (_form.IsValid)
            {
                try
                {
                    _gameServer.Config.Update();
                    Snackbar.Add("Server Configuration: Saved", Severity.Success);
                }
                catch (Exception e)
                {
                    Snackbar.Add($"Server Configuration: {e.Message}", Severity.Error);
                }
            }
            else
            {
                foreach (string error in _form.Errors)
                {
                    Snackbar.Add($"Server Configuration: {error}", Severity.Error);
                }
            }
        }
    }

    private void NavigateToConfiguration(Guid guid)
    {
        NavigationManager.NavigateTo($"/servers/{guid}/configuration");
    }
}
