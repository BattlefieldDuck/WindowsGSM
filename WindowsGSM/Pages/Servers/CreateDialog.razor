@inject GameServerService GameServerService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudForm @ref="_form">
            <MudSelect @bind-Value="@_gameServer" Label="Select the game server" HelperText="@($"{@_gameServers.Count} game servers supported")" Variant="Variant.Outlined">
                @foreach (IGameServer gameServer in _gameServers)
                {
                    <MudSelectItem Value="@gameServer">
                        <div class="d-flex align-center">
                            <img src="@gameServer.ImageSource" height="24" class="mr-2 rounded-lg" /> @gameServer.Name
                        </div>
                    </MudSelectItem>
                }
            </MudSelect>

            <MudTextField @bind-Value="@_basic.Name" Label="Name" HelperText="Server Display Name (You can change it later)"></MudTextField>
            <MudTextField @bind-Value="@_basic.Directory" Label="Directory" HelperText="Server Create Directory"></MudTextField>

            @if (_gameServer != null && _gameServer.Config.TryGetPropertyInfo("Create", out PropertyInfo? tab))
            {
                object? config = tab.GetValue(_gameServer.Config);

                @foreach (PropertyInfo field in tab.PropertyType.GetProperties())
                {
                    @if (field.TryGetCustomAttribute<TextFieldAttribute>(out TextFieldAttribute? textField))
                    {
                        @if (textField.InputType == InputType.Password)
                        {
                            @*Password Field*@
                            <MudPasswordField
                                HelperText="@textField.HelperText"
                                Label="@textField.Label"
                                Required="@textField.Required"
                                RequiredError="@textField.RequiredError"
                                Value="@(field.GetValue(config)?.ToString() ?? string.Empty)"
                                ValueChanged="@((e) => field.SetValue(config, e))" />
                        }
                        else
                        {
                            @*Text Field*@
                            <MudTextField 
                                T="string"
                                HelperText="@textField.HelperText"
                                Label="@textField.Label"
                                Required="@textField.Required"
                                RequiredError="@textField.RequiredError"
                                Value="@(field.GetValue(config)?.ToString() ?? string.Empty)"
                                ValueChanged="@((e) => field.SetValue(config, e))"
                                InputType="@textField.InputType" />
                        }
                    }
                    else if (field.TryGetCustomAttribute<CheckBoxAttribute>(out CheckBoxAttribute? checkBox))
                    {
                        bool isChecked = bool.TryParse(field.GetValue(config)?.ToString(), out bool value) ? value : false;

                        <MudCheckBox
                            T="bool"
                            Checked="@isChecked"
                            CheckedChanged="@((e) => field.SetValue(config, e))"
                            Required="@checkBox.Required"
                            RequiredError="@checkBox.RequiredError"
                            Error="@(!isChecked)"
                            ErrorText="@checkBox.RequiredError"
                            Color="Color.Primary" >

                        @if (!string.IsNullOrWhiteSpace(checkBox.Text))
                        {
                            Regex regex = new(@"(?:__|[*#])|\[(.*?)\]\((.*?)\)");
                            MatchCollection matches = regex.Matches(checkBox.Text);
                            int i = 0;

                            @foreach (Match match in matches)
                            {
                                @while (i < match.Index)
                                {
                                    @checkBox.Text[i++];
                                }

                                i = match.Index + match.Length;

                                <MudLink Href="@match.Groups[2].Value" Target="_blank">@match.Groups[1].Value</MudLink>
                            }
                        }

                        </MudCheckBox>

                        @if (!isChecked)
                        {
                            <MudText Typo="Typo.body2" Color="@Color.Error">@checkBox.RequiredError</MudText>
                        }
                    }
                }
            }
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Submit">Create</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    public MudDialogInstance? MudDialog { get; set; }

    private List<IGameServer> _gameServers = new();
    private IGameServer? _gameServer;
    private Guid _guid = Guid.NewGuid();
    private BasicConfig _basic = new();
    private MudForm? _form;

    protected override void OnInitialized()
    {
        _gameServers = GameServerService.GetSupportedGameServers();
        _gameServer = _gameServers[0]; // TODO: Get last selected game server using local storage maybe
        _basic = GameServerService.GetNewBasicConfig(_guid);
    }

    private async Task Submit()
    {
        if (_gameServer != null && _form != null)
        {
            await _form.Validate();

            if (_form.IsValid)
            {
                _gameServer.Config.Basic = _basic;
                _gameServer.Config.Guid = _guid;

                MudDialog?.Close(DialogResult.Ok(_gameServer));
            }
            else
            {
                foreach (string error in _form.Errors)
                {
                    Snackbar.Add($"Create Server: {error}", Severity.Error);
                }
            }
        }
    }

    private void Cancel() => MudDialog?.Cancel();
}
